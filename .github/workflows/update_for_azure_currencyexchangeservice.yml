name: Build, Test, and Deploy JAR app to Azure Web App - currencyexchangeservice

on:
  push:
    branches: [ "update_for_azure" ]
  pull_request:
    branches: [ "update_for_azure" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Clean build folder with Gradle
        run: ./gradlew clean

      - name: Run test using gradlew
        run: ./gradlew test

      - name: Build jar with Gradle Wrapper
        run: ./gradlew jar

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: java-app
          path: build/libs/*.jar

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run Tests with Gradle
        run: ./gradlew test

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: java-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'currencyexchangeservice'
          slot-name: 'Production'
          package: ./CurrencyExchangeService-0.0.2-SNAPSHOT-plain.jar
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_BA44D8CC83114D9D9C5B98F711512549 }}

      - name: Save Deployment URL
        run: echo "APP_URL=${{ steps.deploy-to-webapp.outputs.webapp-url }}" >> $GITHUB_ENV

  check-success:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Check App Availability with retry logic
        run: |
          url="${{ env.APP_URL }}/api/currency?date=1980-01-01"
          attempts=0
          max_attempts=5
          delay=240

          while [[ $attempts -lt $max_attempts ]]; do
            response=$(curl -o /dev/null -s -w "%{http_code}\n" "$url")
            if [[ "$response" == "200" || "$response" == "203" || "$response" == "204" ]]; then
              echo "Success: Service is up and running. Response status: $response"
              exit 0
            else
              echo "Attempt $((attempts + 1)) failed with status: $response"
              ((attempts++))
              echo "Waiting $delay seconds before retrying..."
              sleep $delay
              delay=$((delay / 2))  # Decrease delay for next retry
            fi
          done
          
          echo "Fail: Service responded with unacceptable status after $max_attempts attempts."
          exit 1